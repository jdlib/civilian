import java.time.LocalDateTime
import org.civilian.application.Application
import org.civilian.resource.Resource
import org.civilian.resource.pathparam.PathParam
import org.civilian.controller.ControllerSignature
import org.civilian.controller.scan.ResourceInfo
import org.civilian.util.ClassUtil
import org.civilian.util.JavaName


template(ResourceInfo root, String outputPackage, String outputName, Application app, boolean timestamp)
	package-access
	extends -
	throws -
{{
	@ctrlRootPackage_ = app.getControllerConfig().getRootPackage();
	^'/**
	^' * Generated ^?timestamp|at ^{LocalDateTime.now()} |by ^{ServerConstGenerator.class.getName()}.
	^' * Do not edit.
	^' */
	package ^outputPackage;
	

	import ^{ControllerSignature.class.getName()};
	
		
	^'/**
	^' * Defines the resources of application ^{app.getClass().getName()}.
	^' */	
	public interface ^outputName
	{
		@printResourceComment(root);
		public static final Root root = new Root();
		@printResourceClass(root);
	}
}}


private void printResourceClass(ResourceInfo info)
{{
	@// two line spacer


	@int childCount = info.getChildCount();
	@printResourceComment(info);
	@String className = getJavaClass(info);
	@boolean hasController = info.getControllerSignature() != null; 
	public static class ^className^?hasController| extends ^{Resource.class.getName()}| 
	{
		public ^className(^?{!info.isRoot()}|^{Resource.class.getName()} parent|)
		{
			@String thisRes = hasController ? "this" : "this.resource_"; 
			@if (hasController)
				super^\
			@else
				^thisRes = new ^{Resource.class.getName()}^\
			(^{printCtorArgs(info, "parent");});
			@if (hasController)
				@printSetCtrlSeg(info);
			
			@// print field definitions
			@for (int i=0; i<childCount; i++)
				@ResourceInfo child = info.getChild(i);
				@String field = getJavaField(child);
				this.^field = new ^\
				@if (child.getChildCount() == 0)
					^{Resource.class.getName()}(^{printCtorArgs(child, thisRes);});
					@if (child.getControllerSignature() != null)
						this.^field.^{printSetCtrlSeg(child);}
				@else
					^{getJavaClass(child)}(^thisRes);
		}
		@if (!hasController && info.isRoot())
			^'
			public ^{Resource.class.getName()} getResource() 			
			{
				return resource_;
			}
		@// print field declarations
		@for (int i=0; i<childCount; i++)
			^'
			@ResourceInfo child = info.getChild(i);
			@printResourceComment(child);
			public final ^{child.getChildCount() > 0 ? getJavaClass(child) : Resource.class.getName()} ^{getJavaField(child)};
		@if (!hasController)
			^'
			// hidden since not mapped to a controller
			private final ^{Resource.class.getName()} resource_;
		@for (int i=0; i<childCount; i++)
			@ResourceInfo child = info.getChild(i);
			@if (child.getChildCount() > 0)
				@printResourceClass(child);
		@if (info.isRoot())
			^'
			^'
			private static ControllerSignature sig(String subPackage, String className)
			{
				return new ControllerSignature("^{ctrlRootPackage_}" + subPackage + '.' + className);
			}
	}
}}



private void printResourceComment(ResourceInfo resInfo)
{{
	@ControllerSignature ctrlSig = resInfo.getControllerSignature();
	^'/**
	^' * "^resInfo"^?{ctrlSig != null}| = ^ctrlSig|
	^' */ 
}}


private void printCtorArgs(ResourceInfo info, String parent)
{{
	@if (!info.isRoot())
		^parent, ^\ 
		@if (info.getSegment() != null)
			"^{info.getSegment()}"^\
		@else
			^{pathParamConst(info.getPathParam())}^\
}}


private void printSetCtrlSeg(ResourceInfo info)
{{
	@ControllerSignature sig = info.getControllerSignature();
	@String packageName = ClassUtil.getPackageName(sig.getClassName());
	@String simpleName  = ClassUtil.cutPackageName(sig.getClassName());
	@String packagePart = packageName.substring(ctrlRootPackage_.length());
	setData(sig(^{stringArg(packagePart)}, ^{stringArg(simpleName)})^\
	@if (sig.getMethodSegment() != null)
		.withMethodSegment("^{sig.getMethodSegment()}")^\
	@else if (sig.getMethodPathParam() != null)
		.withMethodPathParam(^{pathParamConst(sig.getMethodPathParam())}^\
	);
}}


private String pathParamConst(PathParam<?> param)
{
	return app.getControllerConfig().getPathParams().getConstant(param);
}


private String stringArg(String s)
{
	return s == null ? "null" : '"' + s + '"';
}


private String getJavaField(ResourceInfo info)
{
	if (info.isRoot())
		return "root";
	else if (info.getSegment() != null)
		return javaName_.makeVar(info.getSegment());
	else
		return javaName_.makeParamVar(info.getPathParam().getName());
}


private String getJavaClass(ResourceInfo info)
{
	if (info.isRoot())
		return "Root";
	else if (info.getSegment() != null)
		return javaName_.makeClass(info.getSegment());
	else
		return javaName_.makeParamClass(info.getPathParam().getName());
}


private String ctrlRootPackage_;
private final JavaName javaName_ = new JavaName();
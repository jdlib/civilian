import java.time.LocalDateTime
import java.util.List
import java.util.HashSet
import org.civilian.util.ClassUtil
import org.civilian.util.JavaName


template(ResBundleCompiler.Config config, String packageName, LocalDateTime generationTime, List<Translation> translations)
	package-access
	extends -
	throws -
{{
	@boolean hasIdClass   = config.idClass != null;
	@String idClassSimple = hasIdClass ? ClassUtil.cutPackageName(config.idClass) : "String";
	@HashSet<String> usedConstants = new HashSet<>();
	@//
	package <%packageName%>;
	^'	
	^'	
	@if (hasIdClass && !config.inlineIdClass)
		import <%config.idClass%>;
		^'	
		^'	
	^'/**
	^' * Contains constants for resource bundle ids in <%config.excelFile.getName()%>.
	^' * Generated at <%generationTime%>. Do not edit directly.
	^' */
	public interface <%config.constClass%>
	{
		@for (Translation t : translations)
			@// javafy key: must be a valid java identifier
			@// escape key when passed as argument to the MsgKey ctor
			@// keep a list of javafied keys and add _x suffixes if not unique
			@String id = t.id;
			@String constantName = getConstantName(id, usedConstants);
			@if (constantName != null)
				@if (config.javadoc)
					/**^\
					@for (String lang : t.lang)
						^' "<%lang%>"^\
					*/
				public static final <%idClassSimple%> <%constantName%>^\
				@for (int i=id.length(); i<=20; i++)
					^' ^\
				^' = ^hasIdClass?|new <%idClassSimple%>(|"<%escapeId(id)%>"^hasIdClass?|)|;
		@if (config.inlineIdClass)
			^'	
			^'	
			public static class <%idClassSimple%> implements CharSequence
			{
				public <%idClassSimple%>(String value)
				{
					value_ = value;
				}

				@@Override public int length()
				{
					return value_.length();");
				}

				@@Override public char charAt(int index)
				{
					return value_.charAt(index);");
				}

				@@Override public CharSequence subSequence(int start, int end)
				{
					return value_.subSequence(start, end);");
				}
				
				@@Override public String toString()
				{
					return value_;
				}
				
				private String value_;
			}
	}
}}


private String getConstantName(String id, HashSet<String> usedConstants)
{
	String constantName = javaName_.make(id);
	if (constantName != null)
	{
		if (usedConstants.contains(constantName))
			constantName = null;
		else
			usedConstants.add(constantName);
	}
	return constantName;
}

	
private String escapeId(String id)
{
	return id.replace("\\",  "\\\\").replace("\"", "\\\"");
}


private final JavaName javaName_ = new JavaName();